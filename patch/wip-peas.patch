From 8e3781397a5b63107cd01ba6e772c29b9b9d7904 Mon Sep 17 00:00:00 2001
From: Geoff Johnson <geoff.johnson@coanda.ca>
Date: Fri, 12 Dec 2014 16:09:21 -0800
Subject: [PATCH] Working Peas plugin sample using Vala

---
 configure.ac                                | 227 +++++++++++++++++++++++++---
 src/dactl/dactl-main.vala                   |   6 +
 src/libdactl-core/dactl-plugin-manager.vala |  67 ++++++++
 src/libdactl-core/filelist.am               |   1 +
 src/plugins/Makefile.am                     |   9 ++
 src/plugins/heidolph/Makefile.am            |   2 +-
 src/plugins/licor/Makefile.am               |   2 +-
 src/plugins/parker/Makefile.am              |   2 +-
 src/plugins/pyhello/Makefile.am             |   7 +
 src/plugins/pyhello/pyhello.plugin.in       |   7 +
 src/plugins/pyhello/pyhello.py              |  28 ++++
 src/plugins/sample/Makefile.am              |  38 +++++
 src/plugins/sample/dactl-sample-plugin.vala |  31 ++++
 src/plugins/sample/sample.plugin.in         |   7 +
 src/plugins/velmex/Makefile.am              |   2 +-
 15 files changed, 413 insertions(+), 23 deletions(-)
 create mode 100644 src/libdactl-core/dactl-plugin-manager.vala
 create mode 100644 src/plugins/pyhello/Makefile.am
 create mode 100644 src/plugins/pyhello/pyhello.plugin.in
 create mode 100644 src/plugins/pyhello/pyhello.py
 create mode 100644 src/plugins/sample/Makefile.am
 create mode 100644 src/plugins/sample/dactl-sample-plugin.vala
 create mode 100644 src/plugins/sample/sample.plugin.in

diff --git a/configure.ac b/configure.ac
index 2aa6c4f..4cef334 100644
--- a/configure.ac
+++ b/configure.ac
@@ -68,8 +68,8 @@ dnl Library checks
 VALAFLAGS="--enable-deprecated --target-glib=2.38 $VALAFLAGS"
 
 dnl Need to work these in to simplify checking
-DACTL_BASE_MODULES="gee-0.8 libxml-2.0"
-DACTL_BASE_MODULES_VALAFLAGS="--pkg gee-0.8 --pkg libxml-2.0"
+DACTL_BASE_MODULES="gee-0.8 libxml-2.0 libpeas-1.0 libpeas-gtk-1.0"
+DACTL_BASE_MODULES_VALAFLAGS="--pkg gee-0.8 --pkg libxml-2.0 --pkg libpeas-1.0 --pkg libpeas-gtk-1.0"
 
 PKG_CHECK_MODULES([LIBDACTL_CORE_DEPS], [$DACTL_BASE_MODULES gio-2.0 gmodule-2.0])
 LIBDACTL_CORE_DEPS_VALAFLAGS="$DACTL_BASE_MODULES_VALAFLAGS --pkg gio-2.0 --pkg gmodule-2.0"
@@ -171,6 +171,15 @@ AS_IF([test "x$enable_parker_plugin" = "xyes"],
                       [$DACTL_COMMON_MODULES cld-0.3])
   ])
 
+DACTL_ADD_PLUGIN([pyhello],[Sample Python3 plugin],[yes])
+
+DACTL_ADD_PLUGIN([sample],[Sample Peas plugin],[yes])
+AS_IF([test "x$enable_sample_plugin" = "xyes"],
+  [
+    PKG_CHECK_MODULES([DACTL_PLUGIN_SAMPLE_DEPS],
+                      [$DACTL_COMMON_MODULES])
+  ])
+
 DACTL_ADD_PLUGIN([velmex],[CLD Velmex plugin],[yes])
 AS_IF([test "x$enable_velmex_plugin" = "xyes"],
   [
@@ -198,6 +207,181 @@ AS_IF([test "x$enable_debug" != "xno"],
 
 AC_SUBST(DACTL_DEBUG_VALAFLAGS)
 
+dnl Lua support for plugins
+LUA51_REQUIRED=5.1.0
+LUAJIT_REQUIRED=2.0
+
+LGI_MAJOR_VERSION=0
+LGI_MINOR_VERSION=8
+LGI_MICRO_VERSION=0
+LGI_REQUIRED=$LGI_MAJOR_VERSION.$LGI_MINOR_VERSION.$LGI_MICRO_VERSION
+AC_DEFINE_UNQUOTED(LGI_MAJOR_VERSION, [$LGI_MAJOR_VERSION], [LGI major version.])
+AC_DEFINE_UNQUOTED(LGI_MINOR_VERSION, [$LGI_MINOR_VERSION], [LGI minor version.])
+AC_DEFINE_UNQUOTED(LGI_MICRO_VERSION, [$LGI_MICRO_VERSION], [LGI micro version.])
+
+dnl
+dnl Test program for LGI version
+dnl
+m4_define([peas_lgi_version_test], [
+#include <lauxlib.h>
+#include <lualib.h>
+
+#include "peas-plugin-loader-lua-utils.c"
+
+int main(int argc, char **argv)
+{
+  lua_State *L;
+  gboolean success;
+
+  L = luaL_newstate ();
+  luaL_openlibs (L);
+
+  success = (peas_lua_utils_require (L, "lgi") &&
+             peas_lua_utils_check_version (L,
+                                           LGI_MAJOR_VERSION,
+                                           LGI_MINOR_VERSION,
+                                           LGI_MICRO_VERSION));
+
+  lua_close (L);
+  return success ? 0 : 1;
+}])
+
+AC_ARG_ENABLE(lua5.1,
+              AS_HELP_STRING([--enable-lua5.1],[Enable Lua 5.1 support]),
+              [enable_lua51=$enableval],
+              [enable_lua51=auto])
+
+AC_ARG_ENABLE(luajit,
+              AS_HELP_STRING([--enable-luajit],[Enable LuaJIT for Lua 5.1 support]),
+              [enable_luajit=$enableval],
+              [enable_luajit=auto])
+
+AC_MSG_CHECKING([for Lua 5.1 availability.])
+
+if test "x$enable_lua51" = "xno"; then
+    found_lua51="no (disabled, use --enable-lua5.1 to enable)"
+    AC_MSG_RESULT([$found_lua51])
+else
+    if test "x$enable_luajit" != "xno"; then
+        PKG_CHECK_EXISTS([luajit >= $LUAJIT_REQUIRED], [
+            found_lua51=yes
+            with_lua51=luajit
+        ], [
+            found_lua51=no
+        ])
+
+        if test "x$enable_luajit" = "xyes" -a "x$found_lua51" = "xno"; then
+            AC_MSG_ERROR([You need to have LuaJIT >= $LUAJIT_REQUIRED
+                          installed to build libpeas])
+        fi
+    fi
+
+    if test "x$found_lua51" != "xyes"; then
+        PKG_CHECK_EXISTS([lua5.1 >= $LUA51_REQUIRED], [
+            found_lua51=yes
+            with_lua51=lua5.1
+        ], [
+            found_lua51=no
+        ])
+
+        if test "x$enable_lua51" = "xyes" -a "x$found_lua51" = "xno"; then
+            AC_MSG_ERROR([You need to have Lua 5.1 >= $LUA51_REQUIRED
+                          installed to build libpeas])
+        fi
+    fi
+
+    if test "x$found_lua51" != "xyes"; then
+        AC_MSG_RESULT([$found_lua51])
+    else
+        AC_MSG_RESULT([$found_lua51 ($with_lua51)])
+
+        LUA51_CFLAGS=`$PKG_CONFIG --cflags $with_lua51`
+        LUA51_LIBS=`$PKG_CONFIG --libs $with_lua51`
+        AC_SUBST(LUA51_CFLAGS)
+        AC_SUBST(LUA51_LIBS)
+
+        AC_MSG_CHECKING(for LGI availability in Lua 5.1.)
+
+        peas_save_CFLAGS="$CFLAGS"
+        peas_save_LIBS="$LIBS"
+        CFLAGS="$PEAS_CFLAGS $LUA51_CFLAGS -I${srcdir}/loaders/lua5.1"
+        LIBS="$PEAS_LIBS $LUA51_LIBS"
+        AC_TRY_RUN(peas_lgi_version_test(0),
+                   found_lua51=yes,
+                   found_lua51=no,
+                   found_lua51=yes)
+        CFLAGS="$peas_save_CFLAGS"
+        LIBS="$peas_save_LIBS"
+
+        if test "x$enable_lua51" = "xyes" -a "x$found_lua51" = "xno"; then
+            AC_MSG_ERROR([You need to have LGI >= $LGI_REQUIRED
+                          installed to build libpeas])
+        fi
+
+        if test "x$found_lua51" = "xyes"; then
+            AC_DEFINE(ENABLE_LUA51, 1, [Define to compile with Lua support])
+        fi
+
+        AC_MSG_RESULT([$found_lua51])
+    fi
+fi
+
+AM_CONDITIONAL([ENABLE_LUA51], [test "x$found_lua51" = "xyes"])
+
+dnl Python support for plugins
+PYTHON3_REQUIRED=3.2.0
+
+dnl Used by the Python loader to check the PyGObject version at runtime
+PYGOBJECT_MAJOR_VERSION=3
+PYGOBJECT_MINOR_VERSION=0
+PYGOBJECT_MICRO_VERSION=0
+PYGOBJECT_REQUIRED=$PYGOBJECT_MAJOR_VERSION.$PYGOBJECT_MINOR_VERSION.$PYGOBJECT_MICRO_VERSION
+AC_DEFINE_UNQUOTED(PYGOBJECT_MAJOR_VERSION,[$PYGOBJECT_MAJOR_VERSION], [PyGObject major version.])
+AC_DEFINE_UNQUOTED(PYGOBJECT_MINOR_VERSION,[$PYGOBJECT_MINOR_VERSION], [PyGObject minor version.])
+AC_DEFINE_UNQUOTED(PYGOBJECT_MICRO_VERSION,[$PYGOBJECT_MICRO_VERSION], [PyGObject micro version.])
+
+AC_MSG_CHECKING([for Python 3 availability.])
+
+AC_ARG_ENABLE(python3,
+    AS_HELP_STRING([--enable-python3],[Enable Python 3 support]),
+    [enable_python3=$enableval],
+    [enable_python3=auto])
+
+if test "x$enable_python3" = "xno"; then
+    found_python3="no (disabled, use --enable-python3 to enable)"
+else
+    AM_PATH_PYTHON($PYTHON3_REQUIRED, [
+        AC_PATH_TOOL(PYTHON3_CONFIG, "python3-config")
+        if test -n "${PYTHON3_CONFIG}"; then
+            PKG_CHECK_MODULES(PYGOBJECT, pygobject-3.0 >= $PYGOBJECT_REQUIRED, [
+                found_python3=yes
+                PYTHON3_CFLAGS=`${PYTHON3_CONFIG} --includes`
+                PYTHON3_LIBS=`${PYTHON3_CONFIG} --libs`
+                PYTHON3_LDFLAGS=`${PYTHON3_CONFIG} --ldflags`
+                PYTHON3_PYEXECDIR="${pyexecdir}"
+                AC_SUBST(PYTHON3_CFLAGS)
+                AC_SUBST(PYTHON3_LIBS)
+                AC_SUBST(PYTHON3_LDFLAGS)
+                AC_SUBST(PYTHON3_PYEXECDIR)
+                AC_DEFINE(ENABLE_PYTHON3, 1, [Define to compile with Python 3 support])
+            ], [
+                found_python3="no (PyGObject not found)"
+            ])
+        else
+            found_python3="no (python3-config not found)"
+        fi
+    ], [
+        found_python3="no (python3 not found)"
+    ])
+fi
+
+if test "x$enable_python3" = "xyes" -a "x$found_python3" != "xyes"; then
+    AC_MSG_ERROR([You need to have Python 3 and PyGObject installed to build libpeas])
+fi
+AC_MSG_RESULT([$found_python3])
+
+AM_CONDITIONAL([ENABLE_PYTHON3],[test "x$found_python3" = "xyes"])
+
 dnl Build flags
 AS_IF([test "x$GCC" != "xno"],
       [CC_CHECK_FLAG([-Wall])]
@@ -258,27 +442,32 @@ AC_MSG_NOTICE([
     $PACKAGE $VERSION
     ===========================
 
-    Prefix:                         ${ac_default_prefix}
-    Source code location:           ${srcdir}
-    System configuration:           ${sysconfdir}
-    Data directory:                 ${datadir}
-    UI directory:                   ${ui_dir}
-    Package directory:              ${pkgconfigdir}
-    Compiler:                       ${CC}
-    CFLAGS:                         ${CFLAGS}
-    VALAFLAGS:                      ${VALAFLAGS}
+    Prefix                        : ${ac_default_prefix}
+    Source code location          : ${srcdir}
+    System configuration          : ${sysconfdir}
+    Data directory                : ${datadir}
+    UI directory                  : ${ui_dir}
+    Package directory             : ${pkgconfigdir}
+    Compiler                      : ${CC}
+    CFLAGS                        : ${CFLAGS}
+    VALAFLAGS                     : ${VALAFLAGS}
 
-    CLD support:                    $with_cld
-    UI support:                     $with_ui
-    Debugging enabled:              $enable_debug
+    CLD support                   : $with_cld
+    UI support                    : $with_ui
+    Debugging enabled             : $enable_debug
 
     Plugins:
 
-    Brabender:                      $enable_brabender_plugin
-    Heidolph:                       $enable_heidolph_plugin
-    Licor:                          $enable_licor_plugin
-    Parker:                         $enable_parker_plugin
-    Velmex:                         $enable_velmex_plugin
+        Brabender                 : $enable_brabender_plugin
+        Heidolph                  : $enable_heidolph_plugin
+        Licor                     : $enable_licor_plugin
+        Parker                    : $enable_parker_plugin
+        Velmex                    : $enable_velmex_plugin
+
+    Languages support:
+
+        Lua 5.1 support           : ${found_lua51}
+        Python 3 support          : ${found_python3}
 
     $PACKAGE will be installed in $bindir
 ])
diff --git a/src/dactl/dactl-main.vala b/src/dactl/dactl-main.vala
index de07213..2267aaa 100644
--- a/src/dactl/dactl-main.vala
+++ b/src/dactl/dactl-main.vala
@@ -41,6 +41,9 @@ internal class Dactl.Main : GLib.Object {
     private Dactl.PluginLoader plugin_loader;
     private Dactl.LogHandler log_handler;
 
+    /* XXX testing Peas plugin manager */
+    private Dactl.PluginManager plugin_manager;
+
     private int exit_code;
 
     public bool need_restart;
@@ -50,6 +53,9 @@ internal class Dactl.Main : GLib.Object {
         this.log_handler = Dactl.LogHandler.get_default ();
         this.plugin_loader = new Dactl.PluginLoader ();
 
+        /* XXX testing Peas plugin manager */
+        plugin_manager = new Dactl.PluginManager ();
+
         this.exit_code = 0;
 
         app = Dactl.UI.Application.get_default ();
diff --git a/src/libdactl-core/dactl-plugin-manager.vala b/src/libdactl-core/dactl-plugin-manager.vala
new file mode 100644
index 0000000..2e518ba
--- /dev/null
+++ b/src/libdactl-core/dactl-plugin-manager.vala
@@ -0,0 +1,67 @@
+/**
+ * Based off of the example at - https://github.com/voldyman/plugin-app
+ */
+
+public class Dactl.PluginAPI : GLib.Object {
+    public PluginAPI () {
+        /* Nothing yet */
+    }
+}
+
+public class Dactl.PluginManager {
+
+    /* FIXME: Should load controller as API from the app, later. */
+
+    Peas.Engine engine;
+    Peas.ExtensionSet exts;
+
+    public Dactl.PluginAPI plugin_iface { private set; public get; }
+
+    public PluginManager () {
+
+        plugin_iface = new Dactl.PluginAPI ();
+
+        engine = Peas.Engine.get_default ();
+
+        GLib.Environment.set_variable ("PEAS_ALLOW_ALL_LOADERS", "1", true);
+        engine.enable_loader ("python3");
+        engine.enable_loader ("gjs");
+        engine.enable_loader ("lua5.1");
+
+        engine.add_search_path (Config.PLUGIN_DIR, null);
+
+        /* Our extension set */
+        Parameter param = GLib.Parameter ();
+        param.value = plugin_iface;
+        param.name = "object";
+        exts = new Peas.ExtensionSet (engine,
+                                      typeof (Peas.Activatable),
+                                      "object",
+                                      plugin_iface,
+                                      null);
+
+        // Load all the plugins found
+        foreach (var plug in engine.get_plugin_list ()) {
+            if (engine.try_load_plugin (plug)) {
+                debug ("Plugin Loaded: " +plug.get_name ());
+            } else {
+                warning ("Could not load plugin: " +plug.get_name ());
+            }
+        }
+
+        exts.extension_removed.connect (on_extension_removed);
+        exts.foreach (extension_foreach);
+
+    }
+
+    void extension_foreach (Peas.ExtensionSet set,
+                            Peas.PluginInfo info,
+                            Peas.Extension extension) {
+        debug ("Extension added");
+        ((Peas.Activatable) extension).activate ();
+    }
+
+    void on_extension_removed (Peas.PluginInfo info, GLib.Object extension) {
+        ((Peas.Activatable) extension).deactivate ();
+    }
+}
diff --git a/src/libdactl-core/filelist.am b/src/libdactl-core/filelist.am
index 3356c09..f74c81a 100644
--- a/src/libdactl-core/filelist.am
+++ b/src/libdactl-core/filelist.am
@@ -10,6 +10,7 @@ LIBDACTL_CORE_VAPI_SOURCE_FILES = \
     dactl-object.vala \
     dactl-plugin.vala \
     dactl-plugin-loader.vala \
+    dactl-plugin-manager.vala \
     dactl-view.vala
 
 LIBDACTL_CORE_NONVAPI_SOURCE_FILES = \
diff --git a/src/plugins/Makefile.am b/src/plugins/Makefile.am
index d6d7cf5..b06fe0c 100644
--- a/src/plugins/Makefile.am
+++ b/src/plugins/Makefile.am
@@ -18,12 +18,21 @@ if BUILD_VELMEX_PLUGIN
 VELMEX_PLUGIN = velmex
 endif
 
+if BUILD_SAMPLE_PLUGIN
+SAMPLE_PLUGIN = sample
+endif
+
 SUBDIRS = $(BRABENDER_PLUGIN) \
 		  $(HEIDOLPH_PLUGIN) \
 		  $(LICOR_PLUGIN) \
 		  $(PARKER_PLUGIN) \
+		  $(SAMPLE_PLUGIN) \
 		  $(VELMEX_PLUGIN)
 
+if ENABLE_PYTHON3
+SUBDIRS += pyhello
+endif
+
 MAINTAINERCLEANFILES = Makefile.in
 
 vala-clean:
diff --git a/src/plugins/heidolph/Makefile.am b/src/plugins/heidolph/Makefile.am
index fb9469a..84b0b98 100644
--- a/src/plugins/heidolph/Makefile.am
+++ b/src/plugins/heidolph/Makefile.am
@@ -45,7 +45,7 @@ libdactl_heidolph_la_LIBADD = \
 libdactl_heidolph_la_LDFLAGS = \
 	$(DACTL_PLUGIN_LINKER_FLAGS)
 
-MAINTAINERCLEANFILES += $(libdactl_brabender_la_SOURCES:.vala=.c)
+MAINTAINERCLEANFILES += $(libdactl_heidolph_la_SOURCES:.vala=.c)
 
 EXTRA_DIST = \
 	$(gresource_file) \
diff --git a/src/plugins/licor/Makefile.am b/src/plugins/licor/Makefile.am
index ef1edd1..c63fc24 100644
--- a/src/plugins/licor/Makefile.am
+++ b/src/plugins/licor/Makefile.am
@@ -44,7 +44,7 @@ libdactl_licor_la_LIBADD = \
 libdactl_licor_la_LDFLAGS = \
 	$(DACTL_PLUGIN_LINKER_FLAGS)
 
-MAINTAINERCLEANFILES += $(libdactl_brabender_la_SOURCES:.vala=.c)
+MAINTAINERCLEANFILES += $(libdactl_licor_la_SOURCES:.vala=.c)
 
 EXTRA_DIST = \
 	$(gresource_file) \
diff --git a/src/plugins/parker/Makefile.am b/src/plugins/parker/Makefile.am
index e3e5751..49a2f29 100644
--- a/src/plugins/parker/Makefile.am
+++ b/src/plugins/parker/Makefile.am
@@ -45,7 +45,7 @@ libdactl_parker_la_LIBADD = \
 libdactl_parker_la_LDFLAGS = \
 	$(DACTL_PLUGIN_LINKER_FLAGS)
 
-MAINTAINERCLEANFILES += $(libdactl_brabender_la_SOURCES:.vala=.c)
+MAINTAINERCLEANFILES += $(libdactl_parker_la_SOURCES:.vala=.c)
 
 EXTRA_DIST = \
 	$(gresource_file) \
diff --git a/src/plugins/pyhello/Makefile.am b/src/plugins/pyhello/Makefile.am
new file mode 100644
index 0000000..c14a2db
--- /dev/null
+++ b/src/plugins/pyhello/Makefile.am
@@ -0,0 +1,7 @@
+include $(top_srcdir)/common.am
+
+plugin_PYTHON = pyhello.py
+plugin_DATA = pyhello.plugin
+
+EXTRA_DIST = \
+	pyhello.plugin.in
diff --git a/src/plugins/pyhello/pyhello.plugin.in b/src/plugins/pyhello/pyhello.plugin.in
new file mode 100644
index 0000000..91ecd0c
--- /dev/null
+++ b/src/plugins/pyhello/pyhello.plugin.in
@@ -0,0 +1,7 @@
+[Plugin]
+Module=pyhello
+Loader=python3
+Name=Python Says Hello
+Description=Says Hello from a python plugin.
+Authors=Geoff Johnson <geoff.jay@gmail.com>
+Copyright=Copyright © 2014 Geoff Johnson
diff --git a/src/plugins/pyhello/pyhello.py b/src/plugins/pyhello/pyhello.py
new file mode 100644
index 0000000..dc18493
--- /dev/null
+++ b/src/plugins/pyhello/pyhello.py
@@ -0,0 +1,28 @@
+# Example taken from: https://github.com/gregier/libpeas/tree/master/peas-demo
+
+from gi.repository import GObject
+from gi.repository import Peas
+from gi.repository import PeasGtk
+from gi.repository import Gtk
+
+LABEL_STRING="Python Says Hello!"
+
+class PyHelloPlugin(GObject.Object, Peas.Activatable):
+    __gtype_name__ = 'PyHelloPlugin'
+
+    object = GObject.property(type=GObject.Object)
+
+    def do_activate(self):
+        print("PyHelloPlugin.do_activate")
+
+    def do_deactivate(self):
+        print("PyHelloPlugin.do_deactivate")
+
+    def do_update_state(self):
+        print("PyHelloPlugin.do_update_state")
+
+class PyHelloConfigurable(GObject.Object, PeasGtk.Configurable):
+    __gtype_name__ = 'PyHelloConfigurable'
+
+    def do_create_configure_widget(self):
+        return Gtk.Label.new("Python Hello configure widget")
diff --git a/src/plugins/sample/Makefile.am b/src/plugins/sample/Makefile.am
new file mode 100644
index 0000000..abc399e
--- /dev/null
+++ b/src/plugins/sample/Makefile.am
@@ -0,0 +1,38 @@
+include $(top_srcdir)/common.am
+
+plugin_LTLIBRARIES = libdactl-sample.la
+plugin_DATA = sample.plugin
+
+libdactl_sample_la_SOURCES = \
+	$(BUILT_SOURCES) \
+	dactl-sample-plugin.vala
+
+libdactl_sample_la_VALAFLAGS = \
+	--target-glib=2.38 \
+	--vapidir=$(top_srcdir)/vapi \
+	$(DACTL_PLUGIN_COMMON_VALAFLAGS) \
+	$(DACTL_UI_DEPS_VALAFLAGS) \
+	$(DACTL_COMMON_LIBDACTL_CORE_VALAFLAGS) \
+	$(DACTL_COMMON_LIBDACTL_UI_VALAFLAGS) \
+	$(DACTL_COMMON_VALAFLAGS)
+
+libdactl_sample_la_CFLAGS = \
+	-DG_LOG_DOMAIN='"Sample"' \
+	$(DACTL_PLUGIN_SAMPLE_DEPS_CFLAGS) \
+	$(DACTL_UI_DEPS_CFLAGS) \
+	$(DACTL_COMMON_LIBDACTL_CORE_CFLAGS) \
+	$(DACTL_COMMON_LIBDACTL_UI_CFLAGS)
+
+libdactl_sample_la_LIBADD = \
+	$(DACTL_PLUGIN_SAMPLE_DEPS_LIBS) \
+	$(DACTL_UI_DEPS_LIBS) \
+	$(DACTL_COMMON_LIBDACTL_CORE_LIBS) \
+	$(DACTL_COMMON_LIBDACTL_UI_LIBS)
+
+libdactl_sample_la_LDFLAGS = \
+	$(DACTL_PLUGIN_LINKER_FLAGS)
+
+MAINTAINERCLEANFILES += $(libdactl_sample_la_SOURCES:.vala=.c)
+
+EXTRA_DIST = \
+	sample.plugin.in
diff --git a/src/plugins/sample/dactl-sample-plugin.vala b/src/plugins/sample/dactl-sample-plugin.vala
new file mode 100644
index 0000000..d6ae77f
--- /dev/null
+++ b/src/plugins/sample/dactl-sample-plugin.vala
@@ -0,0 +1,31 @@
+/**
+ * Sample plugin using libpeas.
+ */
+public class Dactl.Sample.Plugin : GLib.Object, Peas.Activatable, PeasGtk.Configurable {
+
+    public GLib.Object object { owned get; construct; }
+
+    public void activate () {
+        GLib.message ("Dactl.Sample.Plugin activated.");
+    }
+
+    public void deactivate () {
+        GLib.message ("Dactl.Sample.Plugin deactivated.");
+    }
+
+    public void update_state () { }
+
+    public Gtk.Widget create_configure_widget () {
+        var label = new Gtk.Label ("Sample plugin configuration.");
+        return label;
+    }
+}
+
+[ModuleInit]
+public void peas_register_types (GLib.TypeModule module) {
+    var objmodule = module as Peas.ObjectModule;
+    objmodule.register_extension_type (typeof (Peas.Activatable),
+                                       typeof (Dactl.Sample.Plugin));
+    objmodule.register_extension_type (typeof (PeasGtk.Configurable),
+                                       typeof (Dactl.Sample.Plugin));
+}
diff --git a/src/plugins/sample/sample.plugin.in b/src/plugins/sample/sample.plugin.in
new file mode 100644
index 0000000..f501c37
--- /dev/null
+++ b/src/plugins/sample/sample.plugin.in
@@ -0,0 +1,7 @@
+[Plugin]
+Module=dactl-sample
+Loader=C
+Name=Sample
+Description=An example plugin written in Vala.
+Authors=Geoff Johnson <geoff.jay@gmail.com>
+Copyright=Copyright © 2014 Geoff Johnson
diff --git a/src/plugins/velmex/Makefile.am b/src/plugins/velmex/Makefile.am
index 4dac2eb..5ac6f4b 100644
--- a/src/plugins/velmex/Makefile.am
+++ b/src/plugins/velmex/Makefile.am
@@ -46,7 +46,7 @@ libdactl_velmex_la_LIBADD = \
 libdactl_velmex_la_LDFLAGS = \
 	$(DACTL_PLUGIN_LINKER_FLAGS)
 
-MAINTAINERCLEANFILES += $(libdactl_brabender_la_SOURCES:.vala=.c)
+MAINTAINERCLEANFILES += $(libdactl_velmex_la_SOURCES:.vala=.c)
 
 EXTRA_DIST = \
 	$(gresource_file) \
-- 
2.1.0

